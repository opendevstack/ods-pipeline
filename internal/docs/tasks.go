package docs

import (
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	tekton "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	"sigs.k8s.io/yaml"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

type Param struct {
	Name        string
	Default     string
	Description string
}

type Task struct {
	Name        string
	Description string
	Params      []Param
}

func renderTemplate(targetDir, targetFilename string, data Task) {
	targetFile, err := os.Create(targetFilename)
	check(err)
	templateFilename := filepath.Join(targetDir, "template.adoc.tmpl")
	templateFileParts := strings.Split(templateFilename, "/")
	templateDisplayname := templateFileParts[len(templateFileParts)-1]
	_, err = targetFile.WriteString(
		"// Document generated by internal/documentation/tasks.go from " + templateDisplayname + "; DO NOT EDIT.\n\n",
	)
	check(err)
	tmpl, err := template.ParseFiles(templateFilename)
	check(err)
	err = tmpl.Execute(targetFile, data)
	check(err)
}

func parseTask(filename string) *tekton.ClusterTask {
	c, err := ioutil.ReadFile(filename)
	check(err)
	var t *tekton.ClusterTask
	err = yaml.Unmarshal(c, &t)
	check(err)
	return t
}

// RenderTasks extracts the task information into a struct, and
// executes the Asciidoctor template belonging to it.
func RenderTasks(sourceDir, targetDir string) {
	var files []fs.FileInfo
	if _, err := os.Stat(sourceDir); os.IsNotExist(err) {
		check(err)
	} else {
		f, err := ioutil.ReadDir(sourceDir)
		if err != nil {
			log.Fatal(err)
		}
		files = f
	}
	for _, f := range files {
		if f.Name() == "kustomization.yaml" {
			continue
		}
		t := parseTask(filepath.Join(sourceDir, f.Name()))
		task := Task{
			Name:        t.Name,
			Description: t.Spec.Description,
			Params:      []Param{},
		}
		for _, p := range t.Spec.Params {
			defaultValue := ""
			if p.Default != nil {
				defaultValue = p.Default.StringVal
			}
			task.Params = append(task.Params, Param{
				Name:        p.Name,
				Default:     defaultValue,
				Description: p.Description,
			})
		}
		targetFilename := strings.Replace(f.Name(), ".yaml", ".adoc", -1)
		target := filepath.Join(targetDir, targetFilename)
		renderTemplate(targetDir, target, task)
	}
}
