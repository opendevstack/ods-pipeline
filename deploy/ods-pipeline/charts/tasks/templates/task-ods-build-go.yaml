{{if .Values.global.enabledTasks.buildGo }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-build-go{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Go (module) applications.

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-go.sh[build/package/scripts/build-go.sh].

    The following provides an overview of the performed steps:

    - Source files are checked to be formatted with `gofmt`.
    - The go module cache is configured to be on the cache location of the PVC by setting environment variable `GOMODCACHE` to `.ods-cache/deps/gomod` (see link:https://go.dev/ref/mod#module-cache[go module cache]).
    - `golanci-lint` is run. The linter can be configured via a
      config file as described in the
      link:https://golangci-lint.run/usage/configuration/[configuration documentation].
    - Tests are executed. A potential `vendor` directory is excluded. Test
      results are converted into xUnit format.
    - Application binary (named `app`) is built and placed into the directory
      specified by `output-dir`.

    Finally, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `coverage.out`
    * `lint-reports/`
      ** `report.txt`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: enable-cgo
      description: Whether to enable CGO. When not enabled the build will set `CGO_ENABLED=0`.
      type: string
      default: "false"
    - name: go-os
      description: "`GOOS` variable (the execution operating system such as `linux`, `windows`)."
      type: string
      default: "linux"
    - name: go-arch
      description: "`GOARCH` variable (the execution architecture such as `arm`, `amd64`)."
      type: string
      default: "amd64"
    - name: output-dir
      description: >-
        Path to the directory into which the resulting Go binary should be copied, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: cache-build
      description: >-
        If enabled tasks uses or populates cache with the output dir contents (and artifacts) so that
        a build can be skipped if the `working-dir` contents did not change.
        For single build repos enabling build caching has limited benefits. For multi build repos enabling this is recommended unless the build is dependant on files outside of the working directory. See ADR caching-build-tasks for more details and workarounds.
      type: string
      default: "false"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-go.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-go"
    - name: pre-test-script
      description: Script to execute before running tests, relative to the working directory.
      type: string
      default: ""
    - name: sonar-quality-gate
      description: Whether the SonarQube quality gate needs to pass for the task to succeed.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip SonarQube analysis or not.
      type: string
      default: "false"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  {{- with ((.Values.go).sidecars) }}
  sidecars:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  steps:
    - name: build-go-binary
      # Image is built from build/package/Dockerfile.go-toolset.
      image: '{{.Values.registry}}/{{default .Release.Namespace .Values.namespace}}/ods-go-toolset:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {{- (.Values.go).resources | default dict | toYaml | nindent 8 }}
      script: |
        supply-sonar-project-properties-default
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=go-$(params.go-os)-$(params.go-arch)
        if copy-build-if-cached \
          --cache-build=$(params.cache-build) \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-go.sh.
        set +e 
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --enable-cgo=$(params.enable-cgo) \
          --go-os=$(params.go-os) \
          --go-arch=$(params.go-arch) \
          --pre-test-script=$(params.pre-test-script) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG}
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        if [ "$(params.cache-build)" == "true" ]; then
          cache-build \
            --cache-build-key="$cache_build_key" \
            --cache-location-used-path=$(results.build-reused-from-location.path) \
            --working-dir=$(params.working-dir) \
            --output-dir=$(params.output-dir) \
            --debug=${DEBUG}
        fi        
      workingDir: $(workspaces.source.path)
    {{- include "sonar-step" . | indent 4}}
  workspaces:
    - name: source
{{end}}
