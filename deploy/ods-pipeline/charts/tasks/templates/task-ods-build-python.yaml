{{if .Values.global.enabledTasks.buildPython }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-build-python{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Python applications.

    See https://github.com/opendevstack/ods-pipeline/blob/v{{.Chart.AppVersion}}/docs/tasks/ods-build-python.adoc
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: cache-sources
      description: |
        List of build source directories (as colon separated string) which influence the build.
        If the contents in these directories change the cache is invalidated so that the build task will rebuild from scratch.
        These directories are relative to the repository root.
        If left empty no caching is enabled. When sources are only in the working-dir, this value can be the same value.
      type: string
      default: ""
      type: string
      default: ""
    - name: max-line-length
      description: Maximum line length.
      type: string
      default: "120"
    - name: pre-test-script
      description: Script to execute before running tests, relative to the working directory.
      type: string
      default: ""
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-python.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-python"
    - name: sonar-quality-gate
      description: Whether quality gate needs to pass.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip the SonarQube analysis or not.
      type: string
      default: "false"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  {{- with ((.Values.python).sidecars) }}
  sidecars:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  steps:
    - name: build-python
      # Image is built from build/package/Dockerfile.python-toolset.
      image: '{{.Values.imageRepository}}/ods-python-toolset:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {{- (.Values.python).resources | default dict | toYaml | nindent 8 }}
      script: |
        supply-sonar-project-properties-default --working-dir=$(params.working-dir)
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=python
        if copy-build-if-cached \
          --cache-build-key="$cache_build_key" \
          --cache-sources=$(params.cache-sources) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-python.sh.
        set +e 
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --max-line-length=$(params.max-line-length) \
          --pre-test-script=$(params.pre-test-script) \
          --debug=${DEBUG}
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        cache-build \
          --cache-build-key="$cache_build_key" \
          --cache-sources=$(params.cache-sources) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG}
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
    {{- include "sonar-step" . | indent 4}}
  volumes:
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
{{end}}
