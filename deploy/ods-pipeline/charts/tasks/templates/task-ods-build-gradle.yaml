{{if .Values.global.enabledTasks.buildGradle }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-build-gradle{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Gradle applications.
    
    The gradle build by default caches the downloaded version of the gradle wrapper and dependencies in the cache location of
    the PVC by setting the environment variable `GRADLE_USER_HOME` to `/workspace/source/.ods-cache/deps/gradle`. 

    The following steps are executed:

    - build gradle application, using `gradlew clean build`, which includes tests execution and coverage report generation
    - SonarQube quality scan

    Notes:

    - tests exclude the vendor directory.
    - test results are converted into xUnit format.

    Available environment variables:

    - `ODS_OUTPUT_DIR`: this environment variable points to the folder
    that this build expects generated application artifacts to be copied to.
    The gradle script should read it and copy there the generated artifacts.
    - `NEXUS_*` env vars: `NEXUS_URL`, `NEXUS_USERNAME` and `NEXUS_PASSWORD`
    are available and should be read by the gradle script.

    To enable the gradle script to copy the generated application artifacts script follow these steps:

    - read the environment variable `ODS_OUTPUT_DIR` in the buildscript section of the gradle script:
    ```
    buildscript {
        ext {
          outputDir = System.getenv('ODS_OUTPUT_DIR')
        }
    }
    ```
    - customize the jar tasks to set the destination directory
    ```
    jar {
        println("Set application jar name to 'app'")
        archiveBaseName = 'app'
        if (outputDir != null) {
            println("Set destinationDirectory to '${projectDir}/${outputDir}'")
            destinationDirectory = file("${projectDir}/${outputDir}")
        }
    }
    ```

    To create a coverage report be sure that you add to `gradle.properties` the required
    configuration. For example to enable Jacoco coverage repot you will need to:

    - add `jacoco` plugin:
    ```
    plugins {
        id 'application'
        id 'jacoco'
    }
    ```
    - add task `jacocoTestReport`:
    ```
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
    ```
    - add `finalizedBy jacocoTestReport` to the task `test`:
    ```
    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    ```

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-gradle.sh[build/package/scripts/build-gradle.sh].

    After tests ran successfully, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `coverage.xml`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`

    Instead of the built-in script, one can also specify a build script located
    in the Git repository using the `build-script` task parameter. This allows
    full control of building and testing, including any generation of artifacts.
    Note that some other task parameters have no effect when a custom build
    script is used, unless they are handled properly in the script. At a
    minimum, the custom script should place its outputs in the directory
    identified by `output-dir`.
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: gradle-additional-tasks
      description: >-
        Additional gradle tasks to be passed to the gradle build. (default tasks called are `clean` and `build`).
      type: string
      default: ""
    - name: gradle-options
      description: >-
        Options to be passed to the gradle build.
        (See ref: https://docs.gradle.org/7.4.2/userguide/command_line_interface.html#sec:command_line_debugging)
      type: string
      default: "--no-daemon --stacktrace"
    - name: gradle-opts-env
      description: >-
        Will be exposed to the build via `GRADLE_OPTS` environment variable.
        Specifies JVM arguments to use when starting the Gradle client VM. The client VM only handles command line input/output, so it is rare that one would need to change its VM options.
        You can still use this to change the settings for the Gradle daemon which runs the actual build by setting the according Gradle properties by `-D`.
        If you want to set the JVM arguments for the actual build you would do this via `-Dorg.gradle.jvmargs=-Xmx1024M`
        (See ref: https://docs.gradle.org/7.4.2/userguide/build_environment.html#sec:gradle_configuration_properties).
      type: string
      default: "-Dorg.gradle.jvmargs=-Xmx512M"
    - name: output-dir
      description: >-
        Path to the directory into which the resulting Java application jar should be copied, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: cache-build
      description: >-
        If enabled tasks uses or populates cache with the output dir contents (and artifacts) so that
        a build can be skipped if the `working-dir` contents did not change.
        For single build repos enabling build caching has limited benefits. For multi build repos enabling this is recommended unless the build is dependant on files outside of the working directory. See ADR caching-build-tasks for more details and workarounds.
      type: string
      default: "false"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-gradle.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-gradle"
    - name: sonar-quality-gate
      description: Whether the SonarQube quality gate needs to pass for the task to succeed.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip SonarQube analysis or not.
      type: string
      default: "false"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  {{- with ((.Values.gradle).sidecars) }}
  sidecars:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  steps:
    - name: build-gradle-binary
      # Image is built from build/package/Dockerfile.gradle-toolset.
      image: '{{.Values.registry}}/{{default .Release.Namespace .Values.namespace}}/ods-gradle-toolset:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: GRADLE_OPTS
          value: "$(params.gradle-opts-env)"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
      resources:
        {{- (.Values.gradle).resources | default dict | toYaml | nindent 8 }}
      script: |
        supply-sonar-project-properties-default
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=gradle
        if copy-build-if-cached \
          --cache-build=$(params.cache-build) \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-gradle.sh.
        set +e
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --gradle-additional-tasks="$(params.gradle-additional-tasks)" \
          --gradle-options="$(params.gradle-options)"
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        if [ "$(params.cache-build)" == "true" ]; then
          cache-build \
            --cache-build-key="$cache_build_key" \
            --cache-location-used-path=$(results.build-reused-from-location.path) \
            --working-dir=$(params.working-dir) \
            --output-dir=$(params.output-dir) \
            --debug=${DEBUG}
        fi
      workingDir: $(workspaces.source.path)
    {{- include "sonar-step" . | indent 4}}
  workspaces:
    - name: source
{{end}}
