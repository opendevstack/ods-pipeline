{{if .Values.global.enabledTasks.packageImage }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-package-image{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Packages applications into container images using buildah.

    See https://github.com/opendevstack/ods-pipeline/blob/v{{.Chart.AppVersion}}/docs/tasks/ods-package-image.adoc
  params:
    - name: registry
      description: Image registry to push image to.
      type: string
      default: '{{default .Values.pushRegistry}}'
    - name: image-stream
      description: Reference of the image stream buildah will produce. If not set, the value of `.ods/component` is used.
      type: string
      default: ''
    - name: extra-tags
      description: Additional image tags (e.g. 'latest dev') for pushed images. The primary tag is based on the commit sha. Only tags currently missing from the image will be added.
      type: string # Wanted to use and array but ran into [Cannot refer array params in script #4912](https://github.com/tektoncd/pipeline/issues/4912)
      default: ''
    - name: storage-driver
      description: Set buildah storage driver.
      type: string
      default: vfs
    - name: dockerfile
      description: Path to the Dockerfile to build (relative to `docker-dir`).
      type: string
      default: ./Dockerfile
    - name: docker-dir
      description: Path to the directory to use as Docker context.
      type: string
      default: '.'
    - name: format
      description: 'The format of the built container, `oci` or `docker`.'
      type: string
      default: oci
    - name: buildah-build-extra-args
      description: Extra parameters passed for the build command when building images (e.g. '--build-arg=firstArg=one --build-arg=secondArg=two').
      type: string
      default: ''
    - name: buildah-push-extra-args
      description: Extra parameters passed for the push command when pushing images.
      type: string
      default: ''
    - name: trivy-sbom-extra-args
      description: Extra parameters passed for the trivy command to generate an SBOM.
      type: string
      default: ''
    - name: aqua-gate
      description: Whether the Aqua security scan needs to pass for the task to succeed.
      type: string
      default: "false"
  results:
    - description: Digest of the image just built.
      name: image-digest
  steps:
    - name: package-image
      # Image is built from build/package/Dockerfile.package-image.
      image: '{{.Values.imageRepository}}/ods-package-image:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |

        # ods-package-image is built from cmd/package-image/main.go.
        ods-package-image \
          -image-stream=$(params.image-stream) \
          -extra-tags=$(params.extra-tags) \
          -registry=$(params.registry) \
          -storage-driver=$(params.storage-driver) \
          -format=$(params.format) \
          -dockerfile=$(params.dockerfile) \
          -context-dir=$(params.docker-dir) \
          -buildah-build-extra-args=$(params.buildah-build-extra-args) \
          -buildah-push-extra-args=$(params.buildah-push-extra-args) \
          -trivy-sbom-extra-args=$(params.trivy-sbom-extra-args)

        # As this task does not run unter uid 1001, chown created artifacts
        # to make them deletable by ods-start's cleanup procedure.
        chown -R 1001:0 .ods/artifacts/image-digests .ods/artifacts/sboms
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
    - name: aqua-scan
      # Image is built from build/package/Dockerfile.aqua-scan.
      image: '{{.Values.imageRepository}}/ods-aqua-scan:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: BITBUCKET_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-bitbucket
        - name: BITBUCKET_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-bitbucket-auth
        - name: AQUA_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-aqua
        - name: AQUA_REGISTRY
          valueFrom:
            configMapKeyRef:
              key: registry
              name: ods-aqua
        - name: AQUA_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-aqua-auth
        - name: AQUA_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-aqua-auth
        - name: AQUA_SCANNER_URL
          valueFrom:
            secretKeyRef:
              key: secret
              name: ods-aqua-scanner-url
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        if [ "${AQUA_SCANNER_URL:0:4}" != "http" ]; then
          echo "Skipping Aqua scan"
        else
          download-aqua-scanner \
            --aqua-scanner-url=${AQUA_SCANNER_URL} \
            $(case ${DEBUG} in (true) printf -- '--debug'; esac)

          #  ods-aqua-scan is built from cmd/aqua-scan/main.go.
          ods-aqua-scan \
            -image-stream=$(params.image-stream) \
            -aqua-gate=$(params.aqua-gate)
        fi
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
{{end}}
