{{if .Values.global.enabledTasks.packageImage }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-package-image{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Packages applications into container images using
    link:https://buildah.io[buildah].

    buildah builds a container image from the `docker-dir` directory using the
    provided `dockerfile`.
    The following `--build-arg` parameters are provided to enable convenient access
    to Nexus:

    * nexusUrl=${NEXUS_URL}
    * nexusUsername=Escaped(${NEXUS_USERNAME})
    * nexusPassword=Escaped(${NEXUS_PASSWORD})
    * nexusHost=Host(${NEXUS_URL})
    * nexusAuth=${nexusUsername}:$(nexusPassword)
    * nexusUrlWithAuth=${nexusUrl.withAuth($nexusAuth)}

    The above is adhoc notation meant to be more clear than a bunch of words.
    If no nexusUsername/nexusPassword are defined nexusAuth will be empty and
    nexusUrlWithAuth is equal to nexusUrl.

    By default, the image is named after the component and pushed into the image
    stream located in the namespace of the pipeline run.

    If link:https://www.aquasec.com/products/container-security/[Aqua security scanning]
    is enabled in the cluster, images are scanned and registered in Aqua after
    they are pushed to the image stream. JSON and HTML report artifacts are
    generated. Further, if there is an open pull request on Bitbucket for the
    built branch, a code insight report is attached to the Git commit.

    The following artifacts are generated by the task and placed into `.ods/artifacts/`

    * `aquasec-scans/`
      ** `report.html`
      ** `report.json`
    * `image-digests/`
      ** `<image-name>.json`
    * `sboms/`
      ** `spdx.json`
  params:
    - name: registry
      description: Image registry to push image to.
      type: string
      default: '{{default .Values.registry .Values.pushRegistry}}'
    - name: image-stream
      description: Reference of the image stream buildah will produce. If not set, the value of `.ods/component` is used.
      type: string
      default: ''
    - name: storage-driver
      description: Set buildah storage driver.
      type: string
      default: vfs
    - name: dockerfile
      description: Path to the Dockerfile to build (relative to `docker-dir`).
      type: string
      default: ./Dockerfile
    - name: docker-dir
      description: Path to the directory to use as Docker context.
      type: string
      default: docker
    - name: format
      description: 'The format of the built container, `oci` or `docker`.'
      type: string
      default: oci
    - name: buildah-build-extra-args
      description: Extra parameters passed for the build command when building images (e.g. '--build-arg=firstArg=one --build-arg=secondArg=two').
      type: string
      default: ''
    - name: buildah-push-extra-args
      description: Extra parameters passed for the push command when pushing images.
      type: string
      default: ''
    - name: trivy-sbom-extra-args
      description: Extra parameters passed for the trivy command to generate an SBOM.
      type: string
      default: ''
    - name: aqua-gate
      description: Whether the Aqua security scan needs to pass for the task to succeed.
      type: string
      default: "false"
  results:
    - description: Digest of the image just built.
      name: image-digest
  steps:
    - name: build-and-push-image
      # Image is built from build/package/Dockerfile.buildah.
      image: '{{.Values.registry}}/{{default .Release.Namespace .Values.namespace}}/ods-buildah:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: BITBUCKET_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-bitbucket
        - name: BITBUCKET_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-bitbucket-auth
        - name: AQUA_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-aqua
        - name: AQUA_REGISTRY
          valueFrom:
            configMapKeyRef:
              key: registry
              name: ods-aqua
        - name: AQUA_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-aqua-auth
        - name: AQUA_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-aqua-auth
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |

        #  ods-package-image is built from cmd/package-image/main.go.
        ods-package-image \
          -image-stream=$(params.image-stream) \
          -registry=$(params.registry) \
          -storage-driver=$(params.storage-driver) \
          -format=$(params.format) \
          -dockerfile=$(params.dockerfile) \
          -context-dir=$(params.docker-dir) \
          -buildah-build-extra-args=$(params.buildah-build-extra-args) \
          -buildah-push-extra-args=$(params.buildah-push-extra-args) \
          -trivy-sbom-extra-args=$(params.trivy-sbom-extra-args) \
          -aqua-gate=$(params.aqua-gate)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
{{end}}
