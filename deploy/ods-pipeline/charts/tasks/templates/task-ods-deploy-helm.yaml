{{if .Values.global.enabledTasks.deployHelm }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-deploy-helm{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Deploy Helm charts.

    This tasks will install / upgrade a Helm chart into your Kubernetes /
    OpenShift cluster using Helm.

    Helm has the plugins `helm-diff` and `helm-secrets` installed. A diff is
    performed before an upgrade is attempted. `helm-secrets` can be used to
    encrypt sensitive values in the underlying Git repository using
    https://age-encryption.org[age]. Secrets are decrypted on the fly if the
    secret identified by the `age-key-secret` parameter exists and contains an
    age secret key which corresponding public key was used as one of the
    recipients to encrypt.

    Based on the target environment, some values files are added automatically
    to the invocation of the `helm` command if they are present in the chart
    directory:

    - `values.yaml`: the values file (automatically considered by Helm).
    - `secrets.yaml`: a secrets file.
    - `values.<STAGE>.yaml`: a values file named after the stage (`dev`, `qa` or `prod`) of the target environment.
    - `secrets.<STAGE>.yaml`: a secrets file named after the stage (`dev`, `qa` or `prod`) of the target environment.
    - `values.<ENVIRONMENT>.yaml`: a values file named after the name of the target environment.
    - `secrets.<ENVIRONMENT>.yaml`: a secrets file named after the name of the target environment.

    Further, the task automatically sets the `image.tag` value on the CLI which
    equals the Git commit SHA being built. This value can be used in your Helm
    templates to refer to images built via `ods-package-image`.

    Before the Helm chart is applied, it is packaged, setting the `appVersion`
    to the Git commit SHA and the `version` to the externally provided version,
    if any. If `version` is not given, the value in `Chart.yaml` is used as-is.

    If the pipeline runs for a repository defining subrepos in its `ods.y(a)ml`
    file, then any charts in those subrepos are packaged as well, and added as
    dependencies to the top-most chart under `charts/`. Note that values and
    secrets files are only collected from the repository for which the pipeline
    runs. Therefore, if you use an umbrella repository to promote an
    application from a `dev` stage to `qa` and `prod`, the umbrella repository
    needs to define the stage/environment specific values for the subcomponents
    for `qa`/`prod` instead of having those files in the subrepo.

    In order to produce correct `image.tag` values for subcomponents, the task
    automatically sets `<subcomponent>.image.tag` equal to the Git commit SHA of
    the subcomponent. Further, if no release name is explicitly configured, the
    task also sets `<subcomponent>.fullnameOverride` equal to the respective
    subcomponent to avoid resources being prefixed with the umbrella repository
    component name (assuming your resources are named using the `chart.fullname`
    helper).

    If you do not have an existing Helm chart yet, you can use the provided
    link:https://github.com/opendevstack/ods-pipeline/tree/sample-helm-chart[sample chart]
    as a starting point. It is setup in a way that works with this task out of
    the box.

    The following artifacts are generated by the task and placed into `.ods/artifacts/`

    * `deployments/`
      ** `diff-<env>.txt`
      ** `release-<env>.txt`
  params:
    - name: chart-dir
      description: Helm chart directory that will be deployed
      type: string
      default: ./chart
    - name: release-name
      description: The Helm release name. If empty, the release name is simply the name of the chart.
      type: string
      default: ''
    - name: diff-flags
      description: Flags to pass to `helm diff upgrade` in addition to the ones specified via the `upgrade-flags` parameter. Note that the flags `--detailed-exitcode` and `--no-color` are automatically set and cannot be removed. If flags unknown to `helm diff` are passed, they are ignored.
      type: string
      default: '--three-way-merge'
    - name: upgrade-flags
      description: Flags to pass to `helm upgrade`.
      type: string
      default: '--install --wait'
    - name: age-key-secret
      description: |
        Name of the secret containing the age key to use for helm-secrets.
        If the secret exists, it is expected to have a field named `key.txt` with the age secret key in its content.
      type: string
      default: 'helm-secrets-age-key'
  steps:
    - name: helm-upgrade-from-repo
      # Image is built from build/package/Dockerfile.helm.
      image: '{{.Values.registry}}/{{default .Release.Namespace .Values.namespace}}/ods-helm:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
        - name: HOME
          value: '/tekton/home'
      resources: {}
      script: |
        # deploy-with-helm is built from /cmd/deploy-with-helm/main.go.
        deploy-with-helm \
          -chart-dir=$(params.chart-dir) \
          -release-name=$(params.release-name) \
          -diff-flags="$(params.diff-flags)" \
          -upgrade-flags="$(params.upgrade-flags)" \
          -age-key-secret=$(params.age-key-secret)
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
{{end}}
