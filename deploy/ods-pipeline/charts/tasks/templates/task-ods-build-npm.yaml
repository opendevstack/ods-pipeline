{{if .Values.global.enabledTasks.buildNPM }}
apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-build-npm{{- include "taskSuffix" .}}'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Node.js applications using npm.

    The built-in script executes the following steps:

    - check that package.json and package-lock.json exist to require best practice of using lock files. See also link:https://github.com/opendevstack/ods-pipeline/discussions/411[discussion 411]
    - linting using `npm run lint`
    - build application, using `npm run build`
    - test execution, using `npm run test`
    - SonarQube quality scan

    For linting to work there needs to be a `lint` task in the `package.json` file,
    for example `npx eslint src --format compact`, together with a config file
    (`eslintrc.json` or similar) at the root of the working directory. This can
    be done by running `eslint --init` or by following the
    link:https://eslint.org/docs/user-guide/getting-started[official documentation].

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-npm.sh[build/package/scripts/build-npm.sh].
    In particular, `npm run build` is expected to place outputs into `dist` and
    `npm run test` is expected to create `build/test-results/test/report.xml`
    and `build/coverage/{clover.xml,coverage-final.json,lcov.info}`.

    An example configuration for the test script is:

    ```
    JEST_JUNIT_OUTPUT_DIR='build/test-results/test' JEST_JUNIT_OUTPUT_NAME='report.xml' npx jest --reporters=default --reporters=jest-junit --coverage --coverageDirectory=build/coverage --forceExit ./dist
    ```

    After tests ran successfully, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `clover.xml`
      ** `coverage-final.json`
      ** `lcov.info`
    * `lint-reports`
      ** `report.txt`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`

    Instead of the built-in script, one can also specify a build script located
    in the Git repository using the `build-script` task parameter. This allows
    full control of building and testing, including any generation of artifacts.
    Note that some other task parameters have no effect when a custom build
    script is used, unless they are handled properly in the script. At a
    minimum, the custom script should place its outputs in the directory
    identified by `output-dir`.
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: output-dir
      description: >-
        Path to the directory into which outputs should be placed, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: cache-build
      description: >-
        If enabled tasks uses or populates cache with the output dir contents (and artifacts) so that
        a build can be skipped if the `working-dir` contents did not change.
        You must set this to `"false"` if the build can be affected by files outside `working-dir`. See ADR caching-build-tasks for more details and workarounds.
      type: string
      default: "true"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-npm.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-npm"
    - name: sonar-quality-gate
      description: Whether quality gate needs to pass.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip the SonarQube analysis or not.
      type: string
      default: "false"
    - name: node-version
      description: "Node.js version to use - supported versions: 16, 18"
      type: string
      default: "18"
    - name: build-dir
      description: >-
        Must match the directory into which `npm run build` places files.
        The files inside `build-dir` will be copied to the `dist` folder in `output-dir`
        As a result the files will be in `$output-dir/dist`
        Other common build directories are `build` and `public`.
      type: string
      default: "dist"
    - name: copy-node-modules
      description: >-
        Whether `node-modules` is copied to the `output-dir` or not.
        If copied the node modules are in `$output-dir/dist/node_modules`.
        For frontend components this should be set to "false",
        while for backend components this should be set to "true".
      type: string
      default: "false"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  {{- with ((.Values.npm).sidecars) }}
  sidecars:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  steps:
    - name: build-npm
      # Image is built from build/package/Dockerfile.node<xx>-npm-toolset.
      image: '{{.Values.imageRepository}}/ods-node$(params.node-version)-npm-toolset:{{.Values.global.imageTag | default .Chart.AppVersion}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {{- (.Values.npm).resources | default dict | toYaml | nindent 8 }}
      script: |
        supply-sonar-project-properties-default
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=npm
        if copy-build-if-cached \
          --cache-build=$(params.cache-build) \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-npm.sh.
        set +e 
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} \
          --build-dir=$(params.build-dir) \
          --copy-node-modules=$(params.copy-node-modules)
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        if [ "$(params.cache-build)" == "true" ]; then
          cache-build \
            --cache-build-key="$cache_build_key" \
            --cache-location-used-path=$(results.build-reused-from-location.path) \
            --working-dir=$(params.working-dir) \
            --output-dir=$(params.output-dir) \
            --debug=${DEBUG}
        fi
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
    {{- include "sonar-step" . | indent 4}}
  volumes:
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
{{end}}
