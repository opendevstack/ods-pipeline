# Generated by cmd/sidecar-tasks/main.go; DO NOT EDIT.
apiVersion: tekton.dev/v1beta1
kind: '{{default "ClusterTask" .Values.taskKind}}'
metadata:
  creationTimestamp: null
  name: '{{default "ods" .Values.taskPrefix}}-build-typescript-with-sidecar{{.Values.taskSuffix}}'
spec:
  artifacts:
  - format: XML
    name: Clover coverage report
    path: ./code-coverage/clover.xml
  - format: JSON
    name: Jest coverage report
    path: ./code-coverage/coverage-final.json
  - format: LCOV format
    name: LCOV coverage report
    path: ./code-coverage/lcov.info
  - format: Text
    name: Lint report
    path: ./lint-reports/report.txt
  - format: Markdown
    name: SonarQube analysis report
    path: ./sonarqube-analysis/analysis-report.md
  - format: CSV
    name: SonarQube issues report
    path: ./sonarqube-analysis/issues-report.csv
  - format: XML
    name: Unit test report
    path: ./xunit-reports/report.xml
  description: |-
    Builds Typescript applications.

    The following steps are executed:

    - linting using `eslint`
    - build typescript application, using `npm run build`
    - test execution
    - SonarQube quality scan

    All reports (xUnit report, coverage report and linting report) are placed into `.ods/artifacts`.

    For `eslint` to work there needs to be a config file (`eslintrc.json` or similar) at the root of the working directory.
    This can be done by running `eslint --init` or by following the link:https://eslint.org/docs/user-guide/getting-started[official documentation]

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-typescript.sh[build/package/scripts/build-typescript.sh].
    In particular, `npm run build` is expected to place outputs into `dist`.

    After tests ran successfully, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    **Sidecar variant!** Use this task if you need to run a container next to the build task.
    For example, this could be used to run a database to allow for integration tests.
    The sidecar image to must be supplied via `sidecar-image`.
    Apart from the sidecar, the task is an exact copy of `ods-build-typescript`.
  params:
  - default: .
    description: |
      Working directory. The path must be relative to the root of the repository,
      without leading `./` and trailing `/`.
    name: working-dir
    type: string
  - default: docker
    description: Path to the directory into which outputs should be placed, relative
      to `working-dir`. This directory may then later be used as Docker context for
      example.
    name: output-dir
    type: string
  - default: "0"
    description: Maximum of allowed linting warnings after which eslint will exit
      with an error. Set to "-1" to never exit with an error due to warnings.
    name: max-lint-warnings
    type: string
  - default: .js,.ts,.jsx,.tsx,.svelte
    description: File extensions to lint separated by a comma.
    name: lint-file-ext
    type: string
  - default: "false"
    description: Whether quality gate needs to pass.
    name: sonar-quality-gate
    type: string
  - default: "false"
    description: Whether to skip the SonarQube analysis or not.
    name: sonar-skip
    type: string
  - default: "16"
    description: 'Node.js version to use - supported versions: 16'
    name: node-version
    type: string
  - description: Image to use for sidecar
    name: sidecar-image
    type: string
  sidecars:
  - Workspaces: null
    image: $(params.sidecar-image)
    name: sidecar
    resources: {}
  steps:
  - env:
    - name: HOME
      value: /tekton/home
    - name: CI
      value: "true"
    - name: NEXUS_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-nexus
    - name: NEXUS_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: ods-nexus-auth
    - name: NEXUS_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-nexus-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-node$(params.node-version)-typescript-toolset:{{.Values.imageTag}}'
    name: build-typescript
    resources: {}
    script: |2

      # build-typescript is build/package/scripts/build-typescript.sh.
      build-typescript \
        --working-dir=$(params.working-dir) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG} \
        --max-lint-warnings=$(params.max-lint-warnings) \
        --lint-file-ext=$(params.lint-file-ext)
    workingDir: $(workspaces.source.path)
  - env:
    - name: HOME
      value: /tekton/home
    - name: SONAR_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-sonar
    - name: SONAR_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-sonar-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-sonar:{{.Values.imageTag}}'
    name: scan-with-sonar
    resources: {}
    script: |
      if [ "$(params.sonar-skip)" = "true" ]; then
        echo "Skipping SonarQube analysis"
      else
        mkdir -p .ods/artifacts/sonarqube-analysis
        # sonar is built from cmd/sonar/main.go.
        sonar \
          -working-dir=$(params.working-dir) \
          -quality-gate=$(params.sonar-quality-gate)
      fi
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
