
# Source: tasks/templates/task-ods-build-npm.yaml
apiVersion: tekton.dev/v1beta1
kind: 'Task'
metadata:
  name: 'ods-build-npm'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Node.js applications using npm.

    See https://github.com/opendevstack/ods-pipeline/blob/v0.12.0/docs/tasks/ods-build-npm.adoc
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: output-dir
      description: >-
        Path to the directory into which outputs should be placed, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: cache-build
      description: >-
        If enabled tasks uses or populates cache with the output dir contents (and artifacts) so that
        a build can be skipped if the `working-dir` contents did not change.
        You must set this to `"false"` if the build can be affected by files outside `working-dir`. See ADR caching-build-tasks for more details and workarounds.
      type: string
      default: "true"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-npm.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-npm"
    - name: sonar-quality-gate
      description: Whether quality gate needs to pass.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip the SonarQube analysis or not.
      type: string
      default: "false"
    - name: node-version
      description: "Node.js version to use - supported versions: 16, 18"
      type: string
      default: "18"
    - name: build-dir
      description: >-
        Must match the directory into which `npm run build` places files.
        The files inside `build-dir` will be copied to the `dist` folder in `output-dir`
        As a result the files will be in `$output-dir/dist`
        Other common build directories are `build` and `public`.
      type: string
      default: "dist"
    - name: copy-node-modules
      description: >-
        Whether `node-modules` is copied to the `output-dir` or not.
        If copied the node modules are in `$output-dir/dist/node_modules`.
        For frontend components this should be set to "false",
        while for backend components this should be set to "true".
      type: string
      default: "false"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  steps:
    - name: build-npm
      # Image is built from build/package/Dockerfile.node<xx>-npm-toolset.
      image: 'ghcr.io/opendevstack/ods-pipeline/ods-node$(params.node-version)-npm-toolset:0.12.0'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {}
      script: |
        supply-sonar-project-properties-default --working-dir=$(params.working-dir)
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=npm
        if copy-build-if-cached \
          --cache-build=$(params.cache-build) \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-npm.sh.
        set +e 
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} \
          --build-dir=$(params.build-dir) \
          --copy-node-modules=$(params.copy-node-modules)
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        if [ "$(params.cache-build)" == "true" ]; then
          cache-build \
            --cache-build-key="$cache_build_key" \
            --cache-location-used-path=$(results.build-reused-from-location.path) \
            --working-dir=$(params.working-dir) \
            --output-dir=$(params.output-dir) \
            --debug=${DEBUG}
        fi
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)    
    - name: scan-with-sonar
      # Image is built from build/package/Dockerfile.sonar.
      image: 'ghcr.io/opendevstack/ods-pipeline/ods-sonar:0.12.0'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: SONAR_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-sonar
        - name: SONAR_EDITION
          valueFrom:
            configMapKeyRef:
              key: edition
              name: ods-sonar
        - name: SONAR_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-sonar-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        if [ "$(params.sonar-skip)" = "true" ]; then
          echo "Skipping SonarQube analysis"
        else
          mkdir -p .ods/artifacts/sonarqube-analysis
    
          truststore="${JAVA_HOME}/lib/security/cacerts"
          if [ -f /etc/ssl/certs/private-cert.pem ]; then
            truststore="$(pwd)/.ods-cache/truststore/cacerts"
            configure-truststore --dest-store "${truststore}"
          fi
          # sonar is built from cmd/sonar/main.go.
          sonar \
            -working-dir=$(params.working-dir) \
            -quality-gate=$(params.sonar-quality-gate) \
            -truststore "${truststore}"
        fi
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
  volumes:
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
