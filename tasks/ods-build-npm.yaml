
# Source: tasks/templates/task-ods-build-npm.yaml
apiVersion: tekton.dev/v1beta1
kind: 'Task'
metadata:
  name: 'ods-build-npm'
  annotations:
    "helm.sh/resource-policy": keep
spec:
  description: |
    Builds Node.js applications using npm.

    See https://github.com/opendevstack/ods-pipeline/blob/v0.13.2/docs/tasks/ods-build-npm.adoc
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: cache-sources
      description: |
        List of build source directories (as colon separated string) which influence the build.
        These directories are relative to the repository root.
        If the contents in these directories change the cache is invalidated so that the build task will rebuild from scratch.
        If left empty no caching is enabled. When sources are only in the working-dir, this value can be the same value.
      type: string
      default: ""
    - name: cached-outputs
      description: >-
        List of build output directories (as colon separated string) to be cached.
        These directories are relative to the `working-dir` parameter` 
        Common build directories are `dist` (default), `build` and `public`.
        If empty this could mean that the original sources are being used as build output and no caching of built files are needed. If cache-sources is specified a build can be skipped if these sources do not change.
      type: string
      default: "dist"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-npm.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-npm"
    - name: sonar-quality-gate
      description: Whether quality gate needs to pass.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip the SonarQube analysis or not.
      type: string
      default: "false"
    - name: node-version
      description: "Node.js version to use - supported versions: 16, 18"
      type: string
      default: "18"
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  steps:
    - name: build-npm
      # Image is built from build/package/Dockerfile.node<xx>-npm-toolset.
      image: 'ghcr.io/opendevstack/ods-pipeline/ods-node$(params.node-version)-npm-toolset:0.13.2'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {}
      script: |
        supply-sonar-project-properties-default --working-dir=$(params.working-dir)
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=npm
        if copy-build-if-cached \
          --cache-build-key="$cache_build_key" \
          --cache-sources=$(params.cache-sources) \
          --cached-outputs=$(params.cached-outputs) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-npm.sh.
        set +e 
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG}
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        cache-build \
          --cache-build-key="$cache_build_key" \
          --cache-sources=$(params.cache-sources) \
          --cached-outputs=$(params.cached-outputs) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG}
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)    
    - name: scan-with-sonar
      # Image is built from build/package/Dockerfile.sonar.
      image: 'ghcr.io/opendevstack/ods-pipeline/ods-sonar:0.13.2'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: SONAR_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-sonar
        - name: SONAR_EDITION
          valueFrom:
            configMapKeyRef:
              key: edition
              name: ods-sonar
        - name: SONAR_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-sonar-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        if [ "$(params.sonar-skip)" = "true" ]; then
          echo "Skipping SonarQube analysis"
        else
          mkdir -p .ods/artifacts/sonarqube-analysis
    
          truststore="${JAVA_HOME}/lib/security/cacerts"
          if [ -f /etc/ssl/certs/private-cert.pem ]; then
            truststore="$(pwd)/.ods-cache/truststore/cacerts"
            configure-truststore --dest-store "${truststore}"
          fi
          # sonar is built from cmd/sonar/main.go.
          sonar \
            -working-dir=$(params.working-dir) \
            -quality-gate=$(params.sonar-quality-gate) \
            -truststore "${truststore}"
        fi
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
  volumes:
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
